---
description: nextjs-best-practices
globs: 
alwaysApply: false
---
# Manual de Ouro - Next.js üöÄ

## √çndice
1. [Fundamentos](#fundamentos)
2. [Estrutura de Projetos](#estrutura-de-projetos)
3. [Performance](#performance)
4. [Seguran√ßa](#seguran√ßa)
5. [SEO](#seo)
6. [Dicas e Truques](#dicas-e-truques)

## Fundamentos

### 1. App Router vs Pages Router
- Use o App Router para novos projetos (Next.js 13+)
- Benef√≠cios do App Router:
  - Server Components por padr√£o
  - Melhor performance
  - Layouts aninhados
  - Loading e Error states nativos

### 2. Server vs Client Components
```jsx
// Server Component (padr√£o)
export default function ServerComponent() {
  return <div>Este √© um Server Component</div>
}

// Client Component
'use client'
export default function ClientComponent() {
  return <div>Este √© um Client Component</div>
}
```

## Estrutura de Projetos

### 1. Organiza√ß√£o de Arquivos
```
app/
‚îú‚îÄ‚îÄ (auth)/           # Grupo de rotas autenticadas
‚îú‚îÄ‚îÄ (marketing)/      # Grupo de rotas p√∫blicas
‚îú‚îÄ‚îÄ api/             # Rotas da API
‚îú‚îÄ‚îÄ components/      # Componentes reutiliz√°veis
‚îú‚îÄ‚îÄ lib/            # Utilit√°rios e configura√ß√µes
‚îî‚îÄ‚îÄ styles/         # Arquivos de estilo
```

### 2. Conven√ß√µes de Nomenclatura
- Use `page.tsx` para p√°ginas
- Use `layout.tsx` para layouts
- Use `loading.tsx` para estados de carregamento
- Use `error.tsx` para tratamento de erros

## Performance

### 1. Otimiza√ß√£o de Imagens
```jsx
import Image from 'next/image'

// ‚úÖ Correto
<Image
  src="/imagem.jpg"
  alt="Descri√ß√£o"
  width={500}
  height={300}
  priority={true} // Para imagens acima da dobra
/>

// ‚ùå Evitar
<img src="/imagem.jpg" alt="Descri√ß√£o" />
```

### 2. Caching e Revalida√ß√£o
```jsx
// Revalida√ß√£o a cada hora
export const revalidate = 3600

// Revalida√ß√£o sob demanda
export async function revalidatePath(path: string) {
  revalidatePath(path)
}
```

## Seguran√ßa

### 1. Prote√ß√£o de Rotas
```typescript
// middleware.ts
export function middleware(request: NextRequest) {
  const token = request.cookies.get('token')
  
  if (!token && request.nextUrl.pathname.startsWith('/dashboard')) {
    return NextResponse.redirect(new URL('/login', request.url))
  }
}
```

### 2. Valida√ß√£o de Dados
- Use Zod para valida√ß√£o de schemas
- Implemente rate limiting nas APIs
- Sanitize inputs de usu√°rio

## SEO

### 1. Metadata
```typescript
export const metadata = {
  title: 'Meu Site',
  description: 'Descri√ß√£o do meu site',
  openGraph: {
    title: 'Meu Site',
    description: 'Descri√ß√£o do meu site',
    images: ['/og-image.jpg'],
  },
}
```

### 2. Sitemap e Robots.txt
- Use `generateSitemap` para sitemaps din√¢micos
- Configure `robots.txt` adequadamente

## Dicas e Truques

### 1. Debugging
- Use `console.log` apenas em Client Components
- Implemente error boundaries
- Use React DevTools

### 2. Otimiza√ß√µes
- Implemente lazy loading para componentes grandes
- Use Suspense para melhor UX
- Implemente infinite scroll quando necess√°rio

### 3. Boas Pr√°ticas
- Mantenha componentes pequenos e reutiliz√°veis
- Use TypeScript para melhor type safety
- Implemente testes unit√°rios e de integra√ß√£o
- Use ESLint e Prettier para consist√™ncia de c√≥digo

## Recursos Adicionais
- [Documenta√ß√£o Oficial Next.js](https://nextjs.org/docs)
- [Next.js Blog](https://nextjs.org/blog)
- [Next.js Examples](https://github.com/vercel/next.js/tree/canary/examples)